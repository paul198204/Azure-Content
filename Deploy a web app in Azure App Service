
This topic provides a brief overview of the options for deploying your own content to App Service Web Apps.
The best way to deploy a web app is to set up a continuous delivery workflow integrated with your source control system. Automation not only makes the development process more efficient but also can make your backup and restore processes more manageable and reliable.
For information about deployment from cloud-hosted source control systems, see the following sections later in this article.
•	Visual Studio Online
•	Repository websites using Git
•	Repository websites using Mercurial
•	Dropbox
For information about deployment from on-premises source control systems, see the following sections later in this article.
•	Team Foundation Server (TFS)
•	On-premises Git or Mercurial repositories
You can also automate deployment by using using command-line tools. For information about deployment by using command-line tools, see the following sections later in this article.
•	MSBuild
•	FTP tools and scripts
•	Windows PowerShell
•	.NET management API
•	Azure Command-Line Interface (Azure CLI)
•	Web Deploy command line
Sometimes it is more convenient to deploy from your Integrated Development Environment (IDE). For information about deployment from an IDE, see the following sections later in this article.
•	Visual Studio
•	WebMatrix
Another deployment option is to use a cloud-based service such as Octopus Deploy. For more information, see Deploy ASP.NET applications to Azure Web Sites.
Visual Studio Online
Visual Studio Online (formerly Team Foundation Service) is Microsoft's cloud-based solution for source control and team collaboration. The service is free for a team of up to 5 developers. You can do continuous delivery to a web app in App Services, and your repository can use either Git or TFVC.
For more information, see the following resources:
•	Continuous delivery to Azure using Visual Studio Online and TFVC. Step-by-step tutorial that shows how to set up continuous delivery from Visual Studio Online to a web app, using TFVC. TFVC is the centralized source control option, as opposed to Git, which is the distributed source control option.
•	Continuous delivery to Azure using Visual Studio Online and Git. Similar to the previous tutorial but uses Git instead of TFVC.
Repository websites using Git
Git is a popular distributed source control system. Azure has built-in features that make it easy to automate deployment to a web app from popular web-based repository sites that store Git repositories, including GitHub, CodePlex, and BitBucket. An advantage of using Git to deploy is that it's relatively easy to roll back to an earlier deployment if that ever becomes necessary.
For more information, see the following resources:
•	Publishing from Source Control to Web Apps with Git. How to use Git to publish directly from your local computer to Web Apps (in Azure, this method of publishing is called Local Git). Also shows how to enable continuous deployment of Git repositories from GitHub, CodePlex, or BitBucket.
•	Deploying to Web Apps with GitHub using Kudu. Video by Scott Hanselman and David Ebbo that shows how to deploy a web app directly from GitHub to Web Apps.
•	Deploy to Azure Button for Web Apps. Blog about a method for triggering deployment from a Git repository.
•	Azure Forum for Git, Mercurial, and Dropbox.
Repository websites using Mercurial
If you use Mercurial as your source control system and store your repository in CodePlex or BitBucket, you can use built-in features in Azure App Service to automatically deploy your content.
For information about how to deploy using Mercurial, see the following resources:
•	Publishing from Source Control to Web Apps with Git. Although this tutorial shows how to publish a Git repository, the process for Mercurial repositories hosted in CodePlex or BitBucket is similar.
•	Azure Forum for Git, Mercurial, and Dropbox.
Dropbox
Dropbox is not a source control system, but if you store your source code in Dropbox you can automate deployment from your Dropbox account.
•	Deploy To Web Apps from Dropbox. How to use the Azure Portal to set up Dropbox deployment.
•	Dropbox Deployment to Web Apps. This video walks through the process of connecting a Dropbox folder to a web app and shows how quickly you can get a web app up and running or maintain it using simple drag-and-drop deployment.
•	Azure Forum for Git, Mercurial, and Dropbox.
Visual Studio
For information about how to deploy to Web Apps from Visual Studio, see the following resources:
•	Get started with Azure and ASP.NET. How to create and deploy a simple ASP.NET MVC web project by using Visual Studio and Web Deploy.
•	How to Deploy Azure WebJobs using Visual Studio. How to configure Console Application projects so that they deploy as WebJobs.
•	Deploy a Secure ASP.NET MVC 5 app with Membership, OAuth, and SQL Database to Web Apps. How to create and deploy an ASP.NET MVC web project with a SQL database, by using Visual Studio, Web Deploy, and Entity Framework Code First Migrations.
•	Web Deployment Overview for Visual Studio and ASP.NET. A basic introduction to web deployment using Visual Studio. Dated but includes information that is still relevant, including an overview of options for deploying a database along with the web application and a list of additional deployment tasks you might have to do or manually configure Visual Studio to do for you. This topic is about deployment in general, not just about deployment to Web Apps.
•	ASP.NET Web Deployment using Visual Studio. A 12-part tutorial series that covers a more complete range of deployment tasks than the others in this list. Some Azure deployment features have been added since the tutorial was written, but notes added later explain what's missing.
•	Deploying an ASP.NET Website to Azure in Visual Studio 2012 from a Git Repository directly. Explains how to deploy an ASP.NET web project in Visual Studio, using the Git plug-in to commit the code to Git and connecting Azure to the Git repository. Starting in Visual Studio 2013, Git support is built-in an doesn't require installation of a plug-in.
WebMatrix
For information about how to deploy to Web Apps from WebMatrix, see the following resources:
•	Build and deploy a Node.js web site to Azure using WebMatrix.
•	Create and deploy a PHP-MySQL web app using WebMatrix.
•	WebMatrix 3: Integrated Git and Deployment to Azure. How to use WebMatrix to deploy from a Git source control repository.
For more information, see the following resources:
•	Create a PHP-MySQL web app and deploy using FTP.
Team Foundation Server (TFS)
Team Foundation Server is Microsoft's on-premises solution for source control and team collaboration. You can set up TFS to do continuous delivery to a web app.
For more information, see the following resource:
•	Continuous Delivery for Cloud Services in Azure. This document is for an Azure Cloud Service, but some of its content is relevant to Web Apps.
On-premises Git or Mercurial repositories
In Azure you can enter the URL of any repository that uses Git or Mercurial in order to deploy from that location. You can also directly push from a local Git repository to a web app.
For more information, see the following resources:
•	Publishing from Source Control to Web Apps with Git. How to use Git to publish directly from your local computer to a web app (in Azure, this method of publishing is called Local Git). Also shows how to enable continuous deployment of Git repositories from GitHub, CodePlex, or BitBucket.
•	Publishing to Web Apps from any git/hg repo. Blog that explains the "External Repository" feature in Web Apps.
•	Azure Forum for Git, Mercurial, and Dropbox.
•	Deploying TWO websites to Azure from one Git Repository. Blog post by Scott Hanselman.
MSBuild
If you use the Visual Studio IDE for development, you can use MSBuild to automate anything you can do in your IDE. You can configure MSBuild to use either Web Deploy or FTP/FTPS to copy files. Web Deploy can also automate many other deployment-related tasks, such as deploying databases.
For more information about command-line deployment using MSBuild, see the following resources:
•	ASP.NET Web Deployment using Visual Studio: Command Line Deployment. Tenth in a series of tutorials about deployment to Azure using Visual Studio. Shows how to use the command line to deploy after setting up publish profiles in Visual Studio.
•	Inside the Microsoft Build Engine: Using MSBuild and Team Foundation Build. Hard-copy book that includes chapters on how to use MSBuild for deployment.
FTP tools and scripts
You can deploy content to your App by using FTP to copy files. It's easy to create FTP credentials for a web app, and you can use them in scripts or in applications that work with FTP, including browsers such as Internet Explorer and full-featured free utilities such as FileZilla. Web Apps also supports the more secure FTPS protocol.
Although it's easy to copy your web app's files to Azure using FTP utilities, they don't automatically take care of or coordinate related deployment tasks such as deploying a database or changing connection strings. Also, many FTP tools don't compare source and destination files in order to skip copying files that haven't changed. For large Apps, always copying all files can result in long deployment times even for minor updates since all files are always copied.
For more information, see the following resource:
•	Using FTP Batch Scripts.
Windows PowerShell
You can perform MSBuild or FTP deployment functions from Windows PowerShell. If you do that, you can also use a collection of Windows PowerShell cmdlets that make the Azure REST management API easy to call.
For more information, see the following resources:
•	Deploy a web app linked to a GitHub repository
•	Provision a web app with a SQL Database
•	Provision and deploy microservices predictably in Azure
•	Building Real-World Cloud Apps with Azure - Automate Everything. E-book chapter that explains how the sample application shown in the e-book uses Windows PowerShell scripts to create an Azure test environment and deploy to it. See the Resources section for links to additional Azure PowerShell documentation.
•	Using Windows PowerShell Scripts to Publish to Dev and Test Environments. How to use Windows PowerShell deployment scripts that Visual Studio generates.
.NET management API
You can write C# code to perform MSBuild or FTP functions for deployment. If you do that, you can access the Azure management REST API to perform site management functions.
For more information, see the following resource:
•	Automating everything with the Azure Management Libraries and .NET. Introduction to the .NET management API and links to more documentation.
Azure Command-Line Interface (Azure CLI)
You can use the command line in Windows, Mac or Linux machines to deploy by using FTP. If you do that, you can also access the Azure REST management API using the Azure CLI.
For more information, see the following resource:
•	Azure Command line tools. Portal page in Azure.com for command line tool information.
Web Deploy command line
Web Deploy is Microsoft software for deployment to IIS that not only provides intelligent file sync features but also can perform or coordinate many other deployment-related tasks that can't be automated when you use FTP. For example, Web Deploy can deploy a new database or database updates along with your web app. Web Deploy can also minimize the time required to update an existing site since it can intelligently copy only changed files. Microsoft WebMatrix, Visual Studio, Visual Studio Online, and Team Foundation Server have support for Web Deploy built-in, but you can also use Web Deploy directly from the command line to automate deployment. Web Deploy commands are very powerful but the learning curve can be steep.
For more information, see the following resource:
•	Simple Web Apps: Deployment. Blog by David Ebbo about a tool he wrote to make it easier to use Web Deploy.
•	Web Deployment Tool. Official documentation on the Microsoft TechNet site. Dated but still a good place to start.
•	Using Web Deploy. Official documentation on the Microsoft IIS.NET site. Also dated but a good place to start.
•	StackOverflow. The best place to go for more current information about how to use Web Deploy from the command line.
•	ASP.NET Web Deployment using Visual Studio: Command Line Deployment. MSBuild is the build engine used by Visual Studio, and it can also be used from the command line to deploy web applications to Web Apps. This tutorial is part of a series that is mainly about Visual Studio deployment.
Next Steps
In some scenarios you might want to be able to easily switch back and forth between a staging and a production version of your web app. For more information, see Staged Deployment on Web Apps.
Having a backup and restore plan in place is an important part of any deployment workflow. For information about the Web Apps backup and restore feature, see Web Apps Backups.
For information about how to use Azure's Role-Based Access Control to manage access to Web Apps deployment, see RBAC and Web App Publishing.
For information about other deployment topics, see the Deploy section in Web Apps Documentation.

